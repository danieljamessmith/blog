[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am Daniel Smith, an aspiring Data Scientist and a recent graduate in Applied Mathematics.\nI created this blog to serve both as a portfolio to show to potential employers and for the interest of anyone else currently following or considering a similar path.\nThe blog is made with Quarto, an open source techinical publishing system supporting Jupyter Notebooks. I am using GitHub Pages to host.-"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Welcome to the Course",
    "section": "",
    "text": "___\nThis is the repository for the course: Python for Data Science and Machine Learning Bootcamp\nThank you so much for enrolling in the course!"
  },
  {
    "objectID": "posts/post-with-code/index.html#overview-of-this-repository",
    "href": "posts/post-with-code/index.html#overview-of-this-repository",
    "title": "Welcome to the Course",
    "section": "Overview of this Repository",
    "text": "Overview of this Repository\nThis repository contains everything you need for the course, it has all the notebooks, links"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Example Post 1\n\n\n\n\n\n\n\nDeep Learning\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2023\n\n\nDaniel Smith\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/04-Ecommerce Purchases Exercise - Solutions.html",
    "href": "posts/post-with-code/04-Ecommerce Purchases Exercise - Solutions.html",
    "title": "Example Post",
    "section": "",
    "text": "Ecommerce Purchases Exercise - Solutions\nIn this Exercise you will be given some Fake Data about some purchases done through Amazon! Just go ahead and follow the directions and try your best to answer the questions and complete the tasks. Feel free to reference the solutions. Most of the tasks can be solved in different ways. For the most part, the questions get progressively harder.\nPlease excuse anything that doesn’t make “Real-World” sense in the dataframe, all the data is fake and made-up.\nAlso note that all of these questions can be answered with one line of code. ____ ** Import pandas and read in the Ecommerce Purchases csv file and set it to a DataFrame called ecom. **\n\nimport pandas as pd\n\n\necom = pd.read_csv('Ecommerce Purchases')\n\nCheck the head of the DataFrame.\n\necom.head()\n\n\n\n\n\n\n\nAddress\nLot\nAM or PM\nBrowser Info\nCompany\nCredit Card\nCC Exp Date\nCC Security Code\nCC Provider\nEmail\nJob\nIP Address\nLanguage\nPurchase Price\n\n\n\n\n0\n16629 Pace Camp Apt. 448\\nAlexisborough, NE 77...\n46 in\nPM\nOpera/9.56.(X11; Linux x86_64; sl-SI) Presto/2...\nMartinez-Herman\n6011929061123406\n02/20\n900\nJCB 16 digit\npdunlap@yahoo.com\nScientist, product/process development\n149.146.147.205\nel\n98.14\n\n\n1\n9374 Jasmine Spurs Suite 508\\nSouth John, TN 8...\n28 rn\nPM\nOpera/8.93.(Windows 98; Win 9x 4.90; en-US) Pr...\nFletcher, Richards and Whitaker\n3337758169645356\n11/18\n561\nMastercard\nanthony41@reed.com\nDrilling engineer\n15.160.41.51\nfr\n70.73\n\n\n2\nUnit 0065 Box 5052\\nDPO AP 27450\n94 vE\nPM\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT ...\nSimpson, Williams and Pham\n675957666125\n08/19\n699\nJCB 16 digit\namymiller@morales-harrison.com\nCustomer service manager\n132.207.160.22\nde\n0.95\n\n\n3\n7780 Julia Fords\\nNew Stacy, WA 45798\n36 vm\nPM\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0 ...\nWilliams, Marshall and Buchanan\n6011578504430710\n02/24\n384\nDiscover\nbrent16@olson-robinson.info\nDrilling engineer\n30.250.74.19\nes\n78.04\n\n\n4\n23012 Munoz Drive Suite 337\\nNew Cynthia, TX 5...\n20 IE\nAM\nOpera/9.58.(X11; Linux x86_64; it-IT) Presto/2...\nBrown, Watson and Andrews\n6011456623207998\n10/25\n678\nDiners Club / Carte Blanche\nchristopherwright@gmail.com\nFine artist\n24.140.33.94\nes\n77.82\n\n\n\n\n\n\n\n** How many rows and columns are there? **\n\necom.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\nAddress             10000 non-null object\nLot                 10000 non-null object\nAM or PM            10000 non-null object\nBrowser Info        10000 non-null object\nCompany             10000 non-null object\nCredit Card         10000 non-null int64\nCC Exp Date         10000 non-null object\nCC Security Code    10000 non-null int64\nCC Provider         10000 non-null object\nEmail               10000 non-null object\nJob                 10000 non-null object\nIP Address          10000 non-null object\nLanguage            10000 non-null object\nPurchase Price      10000 non-null float64\ndtypes: float64(1), int64(2), object(11)\nmemory usage: 1.1+ MB\n\n\n** What is the average Purchase Price? **\n\necom['Purchase Price'].mean()\n\n50.34730200000025\n\n\n** What were the highest and lowest purchase prices? **\n\necom['Purchase Price'].max()\n\n99.989999999999995\n\n\n\necom['Purchase Price'].min()\n\n0.0\n\n\n** How many people have English ‘en’ as their Language of choice on the website? **\n\necom[ecom['Language']=='en'].count()\n\nAddress             1098\nLot                 1098\nAM or PM            1098\nBrowser Info        1098\nCompany             1098\nCredit Card         1098\nCC Exp Date         1098\nCC Security Code    1098\nCC Provider         1098\nEmail               1098\nJob                 1098\nIP Address          1098\nLanguage            1098\nPurchase Price      1098\ndtype: int64\n\n\n** How many people have the job title of “Lawyer” ? **\n\necom[ecom['Job'] == 'Lawyer'].info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 30 entries, 470 to 9979\nData columns (total 14 columns):\nAddress             30 non-null object\nLot                 30 non-null object\nAM or PM            30 non-null object\nBrowser Info        30 non-null object\nCompany             30 non-null object\nCredit Card         30 non-null int64\nCC Exp Date         30 non-null object\nCC Security Code    30 non-null int64\nCC Provider         30 non-null object\nEmail               30 non-null object\nJob                 30 non-null object\nIP Address          30 non-null object\nLanguage            30 non-null object\nPurchase Price      30 non-null float64\ndtypes: float64(1), int64(2), object(11)\nmemory usage: 3.5+ KB\n\n\n** How many people made the purchase during the AM and how many people made the purchase during PM ? **\n(Hint: Check out value_counts() ) \n\necom['AM or PM'].value_counts()\n\nPM    5068\nAM    4932\nName: AM or PM, dtype: int64\n\n\n** What are the 5 most common Job Titles? **\n\necom['Job'].value_counts().head(5)\n\nInterior and spatial designer    31\nLawyer                           30\nSocial researcher                28\nPurchasing manager               27\nDesigner, jewellery              27\nName: Job, dtype: int64\n\n\n** Someone made a purchase that came from Lot: “90 WT” , what was the Purchase Price for this transaction? **\n\necom[ecom['Lot']=='90 WT']['Purchase Price']\n\n513    75.1\nName: Purchase Price, dtype: float64\n\n\n** What is the email of the person with the following Credit Card Number: 4926535242672853 **\n\necom[ecom[\"Credit Card\"] == 4926535242672853]['Email'] \n\n1234    bondellen@williams-garza.com\nName: Email, dtype: object\n\n\n** How many people have American Express as their Credit Card Provider and made a purchase above $95 ?**\n\necom[(ecom['CC Provider']=='American Express') & (ecom['Purchase Price']&gt;95)].count()\n\nAddress             39\nLot                 39\nAM or PM            39\nBrowser Info        39\nCompany             39\nCredit Card         39\nCC Exp Date         39\nCC Security Code    39\nCC Provider         39\nEmail               39\nJob                 39\nIP Address          39\nLanguage            39\nPurchase Price      39\ndtype: int64\n\n\n** Hard: How many people have a credit card that expires in 2025? **\n\nsum(ecom['CC Exp Date'].apply(lambda x: x[3:]) == '25')\n\n1033\n\n\n** Hard: What are the top 5 most popular email providers/hosts (e.g. gmail.com, yahoo.com, etc…) **\n\necom['Email'].apply(lambda x: x.split('@')[1]).value_counts().head(5)\n\nhotmail.com     1638\nyahoo.com       1616\ngmail.com       1605\nsmith.com         42\nwilliams.com      37\nName: Email, dtype: int64\n\n\n\n\nGreat Job!"
  },
  {
    "objectID": "posts/Test Post 1/04-Ecommerce Purchases Exercise - Solutions.html",
    "href": "posts/Test Post 1/04-Ecommerce Purchases Exercise - Solutions.html",
    "title": "Example Post 1",
    "section": "",
    "text": "Ecommerce Purchases Exercise - Solutions\nIn this Exercise you will be given some Fake Data about some purchases done through Amazon! Just go ahead and follow the directions and try your best to answer the questions and complete the tasks. Feel free to reference the solutions. Most of the tasks can be solved in different ways. For the most part, the questions get progressively harder.\nPlease excuse anything that doesn’t make “Real-World” sense in the dataframe, all the data is fake and made-up.\nAlso note that all of these questions can be answered with one line of code. ____ ** Import pandas and read in the Ecommerce Purchases csv file and set it to a DataFrame called ecom. **\n\nimport pandas as pd\n\n\necom = pd.read_csv('Ecommerce Purchases')\n\nCheck the head of the DataFrame.\n\necom.head()\n\n\n\n\n\n\n\nAddress\nLot\nAM or PM\nBrowser Info\nCompany\nCredit Card\nCC Exp Date\nCC Security Code\nCC Provider\nEmail\nJob\nIP Address\nLanguage\nPurchase Price\n\n\n\n\n0\n16629 Pace Camp Apt. 448\\nAlexisborough, NE 77...\n46 in\nPM\nOpera/9.56.(X11; Linux x86_64; sl-SI) Presto/2...\nMartinez-Herman\n6011929061123406\n02/20\n900\nJCB 16 digit\npdunlap@yahoo.com\nScientist, product/process development\n149.146.147.205\nel\n98.14\n\n\n1\n9374 Jasmine Spurs Suite 508\\nSouth John, TN 8...\n28 rn\nPM\nOpera/8.93.(Windows 98; Win 9x 4.90; en-US) Pr...\nFletcher, Richards and Whitaker\n3337758169645356\n11/18\n561\nMastercard\nanthony41@reed.com\nDrilling engineer\n15.160.41.51\nfr\n70.73\n\n\n2\nUnit 0065 Box 5052\\nDPO AP 27450\n94 vE\nPM\nMozilla/5.0 (compatible; MSIE 9.0; Windows NT ...\nSimpson, Williams and Pham\n675957666125\n08/19\n699\nJCB 16 digit\namymiller@morales-harrison.com\nCustomer service manager\n132.207.160.22\nde\n0.95\n\n\n3\n7780 Julia Fords\\nNew Stacy, WA 45798\n36 vm\nPM\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0 ...\nWilliams, Marshall and Buchanan\n6011578504430710\n02/24\n384\nDiscover\nbrent16@olson-robinson.info\nDrilling engineer\n30.250.74.19\nes\n78.04\n\n\n4\n23012 Munoz Drive Suite 337\\nNew Cynthia, TX 5...\n20 IE\nAM\nOpera/9.58.(X11; Linux x86_64; it-IT) Presto/2...\nBrown, Watson and Andrews\n6011456623207998\n10/25\n678\nDiners Club / Carte Blanche\nchristopherwright@gmail.com\nFine artist\n24.140.33.94\nes\n77.82\n\n\n\n\n\n\n\n** How many rows and columns are there? **\n\necom.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\nAddress             10000 non-null object\nLot                 10000 non-null object\nAM or PM            10000 non-null object\nBrowser Info        10000 non-null object\nCompany             10000 non-null object\nCredit Card         10000 non-null int64\nCC Exp Date         10000 non-null object\nCC Security Code    10000 non-null int64\nCC Provider         10000 non-null object\nEmail               10000 non-null object\nJob                 10000 non-null object\nIP Address          10000 non-null object\nLanguage            10000 non-null object\nPurchase Price      10000 non-null float64\ndtypes: float64(1), int64(2), object(11)\nmemory usage: 1.1+ MB\n\n\n** What is the average Purchase Price? **\n\necom['Purchase Price'].mean()\n\n50.34730200000025\n\n\n** What were the highest and lowest purchase prices? **\n\necom['Purchase Price'].max()\n\n99.989999999999995\n\n\n\necom['Purchase Price'].min()\n\n0.0\n\n\n** How many people have English ‘en’ as their Language of choice on the website? **\n\necom[ecom['Language']=='en'].count()\n\nAddress             1098\nLot                 1098\nAM or PM            1098\nBrowser Info        1098\nCompany             1098\nCredit Card         1098\nCC Exp Date         1098\nCC Security Code    1098\nCC Provider         1098\nEmail               1098\nJob                 1098\nIP Address          1098\nLanguage            1098\nPurchase Price      1098\ndtype: int64\n\n\n** How many people have the job title of “Lawyer” ? **\n\necom[ecom['Job'] == 'Lawyer'].info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 30 entries, 470 to 9979\nData columns (total 14 columns):\nAddress             30 non-null object\nLot                 30 non-null object\nAM or PM            30 non-null object\nBrowser Info        30 non-null object\nCompany             30 non-null object\nCredit Card         30 non-null int64\nCC Exp Date         30 non-null object\nCC Security Code    30 non-null int64\nCC Provider         30 non-null object\nEmail               30 non-null object\nJob                 30 non-null object\nIP Address          30 non-null object\nLanguage            30 non-null object\nPurchase Price      30 non-null float64\ndtypes: float64(1), int64(2), object(11)\nmemory usage: 3.5+ KB\n\n\n** How many people made the purchase during the AM and how many people made the purchase during PM ? **\n(Hint: Check out value_counts() ) \n\necom['AM or PM'].value_counts()\n\nPM    5068\nAM    4932\nName: AM or PM, dtype: int64\n\n\n** What are the 5 most common Job Titles? **\n\necom['Job'].value_counts().head(5)\n\nInterior and spatial designer    31\nLawyer                           30\nSocial researcher                28\nPurchasing manager               27\nDesigner, jewellery              27\nName: Job, dtype: int64\n\n\n** Someone made a purchase that came from Lot: “90 WT” , what was the Purchase Price for this transaction? **\n\necom[ecom['Lot']=='90 WT']['Purchase Price']\n\n513    75.1\nName: Purchase Price, dtype: float64\n\n\n** What is the email of the person with the following Credit Card Number: 4926535242672853 **\n\necom[ecom[\"Credit Card\"] == 4926535242672853]['Email'] \n\n1234    bondellen@williams-garza.com\nName: Email, dtype: object\n\n\n** How many people have American Express as their Credit Card Provider and made a purchase above $95 ?**\n\necom[(ecom['CC Provider']=='American Express') & (ecom['Purchase Price']&gt;95)].count()\n\nAddress             39\nLot                 39\nAM or PM            39\nBrowser Info        39\nCompany             39\nCredit Card         39\nCC Exp Date         39\nCC Security Code    39\nCC Provider         39\nEmail               39\nJob                 39\nIP Address          39\nLanguage            39\nPurchase Price      39\ndtype: int64\n\n\n** Hard: How many people have a credit card that expires in 2025? **\n\nsum(ecom['CC Exp Date'].apply(lambda x: x[3:]) == '25')\n\n1033\n\n\n** Hard: What are the top 5 most popular email providers/hosts (e.g. gmail.com, yahoo.com, etc…) **\n\necom['Email'].apply(lambda x: x.split('@')[1]).value_counts().head(5)\n\nhotmail.com     1638\nyahoo.com       1616\ngmail.com       1605\nsmith.com         42\nwilliams.com      37\nName: Email, dtype: int64\n\n\n\n\nGreat Job!"
  }
]